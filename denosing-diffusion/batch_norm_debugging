
import sys
sys.path.append('/ssd1/htalendr/tvm/python')

import tvm
from tvm import relax
from tvm.ir.module import IRModule
import numpy as np

def get_batch_norm_module(data_shape, dtype="float32", axis=1, epsilon=1e-5,
                         center=True, scale=True, momentum=0.9, data_layout="NHWC",
                         out_layout="NHWC"):
    """Helper to construct a simple batch_norm module."""

    data = relax.Var("data", relax.TensorStructInfo(data_shape, dtype))
    gamma = relax.Var("gamma", relax.TensorStructInfo((data_shape[axis],), dtype))
    beta = relax.Var("beta", relax.TensorStructInfo((data_shape[axis],), dtype))
    moving_mean = relax.Var("moving_mean", relax.TensorStructInfo((data_shape[axis],), dtype))
    moving_var = relax.Var("moving_var", relax.TensorStructInfo((data_shape[axis],), dtype))

    bb = relax.BlockBuilder()

    with bb.function("main", [data, gamma, beta, moving_mean, moving_var]):
        with bb.dataflow():
            bn_out = bb.emit_te(
                tvm.topi.nn.batch_norm,
                data,
                gamma,
                beta,
                moving_mean,
                moving_var,
                axis=axis,
                epsilon=epsilon,
                center=center,
                scale=scale,
                momentum=momentum,
                layout=data_layout,
                out_layout=out_layout
            )
            gv = bb.emit_output(bn_out)
        bb.emit_func_output(gv)

    return bb.get()


def create_numpy_data(mod, params):
    """Create numpy arrays for inputs and parameters."""
    np_data = {}
    for param in params:
        param_sinfo = mod.get_global_var_static(param.name_hint).struct_info
        np_data[param] = np.random.randn(*[int(sh) for sh in param_sinfo.shape]).astype(param_sinfo.dtype)
    return np_data

def print_moving_stats(name, array):
    """Prints the moving mean and variance (numpy array)."""
    print(f"{name}:\n{array}\n")


def main():
    # Example usage
    data_shape = (1, 3, 224, 224)  # NCHW
    dtype = "float32"
    axis = 1  # Channel axis for NCHW

    # 1. Create the Relax module (equivalent to your batch_norm function)
    mod = get_batch_norm_module(data_shape, dtype=dtype, axis=axis, data_layout="NCHW")
    params = mod["main"].params
    np_data = create_numpy_data(mod, params)

    # 2. Build the module
    target = "llvm"  # Or your desired target (e.g., "cuda")
    with tvm.transform.PassContext(opt_level=3):
        ex = relax.build(mod, target)

    # 3. Create a VM and get the function
    vm = relax.VirtualMachine(ex, tvm.cpu())  # Or tvm.cuda() if using CUDA
    
    # Set state (if available, in this case its the bn module)
    vm.set_input("main", **np_data)

    # Warm up
    vm.invoke_stateful("main")

    # 4. Define a callback function
    def callback(vm, values, handles):
        # `handles` contains the handles to the closure cells (the state).
        # `values` has the function parameters and results
        # The order matches the signature:
        #   data, gamma, beta, moving_mean, moving_var, result_tuple
        # So handles[0] is moving_mean, handles[1] is moving_var.

        mean_handle = handles[0]  # moving_mean is the 4th argument
        var_handle = handles[1]   # moving_var is the 5th argument

        # Convert to numpy arrays for easy printing
        moving_mean_np = vm.read_tensor_from_handle(mean_handle).numpy()
        moving_var_np = vm.read_tensor_from_handle(var_handle).numpy()

        print_moving_stats("Moving Mean (Before)", moving_mean_np)
        print_moving_stats("Moving Variance (Before)", moving_var_np)

        # Run invoke_stateful *inside* the callback
        vm.invoke_stateful("main")

        moving_mean_np = vm.read_tensor_from_handle(mean_handle).numpy()
        moving_var_np = vm.read_tensor_from_handle(var_handle).numpy()

        print_moving_stats("Moving Mean (After)", moving_mean_np)
        print_moving_stats("Moving Variance (After)", moving_var_np)


    # 5. Invoke the function *with* the callback
    print("Running with callback...")
    vm.invoke_main_with_closure(callback)


if __name__ == "__main__":
    main()